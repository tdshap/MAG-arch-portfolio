/*
 * qzready
 * https://bitbucket.org/quartz/qzready
 *
 * Copyright (c) 2014 Richard Stovall
 * Not licensed for public use
 */

'use strict';

module.exports = function(grunt) {

	var options = {};

	function generate_url() {
		var parts = ['base', 'client', 'campaign', 'date', 'unit'], ad_url = '';

		for(var i = 0; i < parts.length; i++) {
			if(options[parts[i]] == '') {
				grunt.log.error('"' + parts[i] + '" is empty');
			} else {
				ad_url += options[parts[i]] + '/';
			}
		}
		return ad_url;
	};

	function generate_footer() {
		var height = options.unit == 'desktop' ? 520 : options.unit == 'tablet' ? 520 : 430;

		return '$(document).ready(function(){ \
					window.app = new App(); \
					QZAD.init({  \
						"el": document.getElementById( "qzad" ), \
						"frameHeight": '+ height +', \
						"App": app \
					}); \
				});';
	};

	function generate_name() {
		var parts = ['client', 'campaign', 'unit', 'version'], name = '';

		for(var i = 0; i < parts.length; i++) {
			i < (parts.length - 1) ? name += options[parts[i]] + '_' : name += options[parts[i]];
		}
		return name;
	};

	/*
	 * replace the asset urls in css/style.css using the default options and the unit type determined
	 * from the path
	 */
	grunt.registerTask('prepare_styles', 'prepare styles', function(){

		/* ----- copy css/style.css to tmp/style.css ----- */
		grunt.config.set('copy.styles.src', ['css/style.css']);
		grunt.config.set('copy.styles.dest', 'tmp/style.css');
		grunt.task.run('copy:styles');
		
		/* ----- replace urls in tmp/style.css ----- */
		grunt.config.set('replace.styles.src', ['tmp/style.css']);
		grunt.config.set('replace.styles.dest', 'tmp/style.css');
		grunt.config.set('replace.styles.replacements', [{ 
			from: '../', 
			to: generate_url() 
		}]);
		grunt.task.run('replace:styles');

		/* ----- minify tmp/style.css ----- */
		grunt.config.set('cssmin.styles.src', ['tmp/style.css']);
		grunt.config.set('cssmin.styles.dest', 'tmp/style.css');
		grunt.task.run('cssmin:styles');
	});

	/*
	 * prepare javascript in js/ using the default options 
	 */
	grunt.registerTask('prepare_scripts', 'prepare scripts', function(){
		options.internal_scripts.push('js/app.js');

		/* ----- concatenate all scripts from the options adding app.js last ----- */
		grunt.config.set('concat.scripts.src', options.internal_scripts);
		grunt.config.set('concat.scripts.dest', 'tmp/app.js');
		grunt.config.set('concat.scripts.options.seperator', '\n');
		grunt.config.set('concat.scripts.options.footer', generate_footer());
		grunt.task.run('concat:scripts');

		/* ----- uglify tmp/app.js ----- */
		grunt.config.set('uglify.options.mangle', false);
		grunt.config.set('uglify.my_target.files', {'tmp/app.js': ['tmp/app.js']})
		grunt.task.run('uglify');

	});

	/*
	 * prepare the index.html file. create tmp/index.html from the index.html file and process to 
	 * remove script tags and to replace asset source urls
	 */
	grunt.registerTask('prepare_index', 'prepare the index.html file', function(){
		var options = this.options();
		var index = grunt.file.read('index.html');
		var regex = /<body\s*[^>]*>([\S\s]*?)<\/body>/i;
		var contents = regex.exec(index);
		
		grunt.file.write('tmp/index.html', contents[1]);

		/* ----- remove all script tags in tmp/index.html ----- */
		grunt.config.set('replace.index.src', ['tmp/index.html']);
		grunt.config.set('replace.index.dest', 'tmp/index.html');
		grunt.config.set('replace.index.replacements', [{
			from: /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, 
			to: ''
		}]);
		grunt.task.run('replace:index');

		/* ----- replace all specified tag sources in tmp/index.html ----- */
		grunt.config.set('replace.source.src', ['tmp/index.html']);
		grunt.config.set('replace.source.dest', 'tmp/index.html');
		grunt.config.set('replace.source.replacements', [{ 
			from: /(src|data-image|poster)=['"](?:[^"'\/]*\/)*([^'"]+)['"]/g, 
			to: function(item) {
				if(item.match(/[^:]+:\/\//gi) == null) {
					var attribute = item.match(/[^:]+=/gi);

					item = item.replace(attribute, "").replace(/'/g,"").replace(/"/g,"");
					return attribute + '"'+ generate_url() + item +'"';
				} else {
					return item;
				}
			}
		}]);
		grunt.task.run('replace:source');

		/* ----- run prettify on the resulting html to remove unnecessary leftover spacing ----- */
		grunt.config.set('prettify.options.indent', 1);
		grunt.config.set('prettify.options.indent_char', "	");
		grunt.config.set('prettify.options.preserve_newlines', true);
		grunt.config.set('prettify.options.unformatted', ['a', 'sub', 'sup', 'b', 'i', 'u']);
		grunt.config.set('prettify.index.src', 'tmp/index.html');
		grunt.config.set('prettify.index.dest', 'tmp/index.html');
		grunt.task.run('prettify:index');
	});

	/*
	 * generate the ready files from the processed files inside tmp
	 */
	grunt.registerTask('generate_ready', 'generate the ready files', function(){
		var str = '';

		grunt.file.mkdir('../ready');

		/* ----- wrap tmp/styles.css in style tags ----- */
		grunt.config.set('concat.styletags.options.banner', '<style type="text/css">');
		grunt.config.set('concat.styletags.options.footer', '</style>');
		grunt.config.set('concat.styletags.src', 'tmp/style.css');
		grunt.config.set('concat.styletags.dest', 'tmp/style.css');
		grunt.task.run('concat:styletags');

		/* ----- wrap tmp/app.js in script tags ----- */
		grunt.config.set('concat.scripttags.options.banner', '<script type="text/javascript">');
		grunt.config.set('concat.scripttags.options.footer', '</script>');
		grunt.config.set('concat.scripttags.src', 'tmp/app.js');
		grunt.config.set('concat.scripttags.dest', 'tmp/app.js');
		grunt.task.run('concat:scripttags');

		for(var i = 0 ; i < options.external_scripts.length; i++) {
			str += '<script type="text/javascript" src="'+ options.external_scripts[i] +'"></script> \n';
		}

		str += '<script id="ix-namer" data-ix-name="'+ generate_name() +'" src="http://ads.qz.com/js/qzad/qzad-1.2.js" type="text/javascript"></script>'

		/* ----- add external scripts back into project ----- */
		grunt.config.set('concat.addscripts.src', 'tmp/index.html');
		grunt.config.set('concat.addscripts.dest', 'tmp/index.html');
		grunt.config.set('concat.addscripts.options.footer', str);
		grunt.task.run('concat:addscripts');

		/* -----combine the styles, html, and scripts ----- */
		grunt.config.set('concat.create.src', ['tmp/style.css','tmp/index.html','tmp/app.js']);
		grunt.config.set('concat.create.dest', '../ready/'+ generate_name() +'.html');
		grunt.task.run('concat:create');
	});

	grunt.registerTask('update_version', 'update the ready file version number', function(){
		if(grunt.file.exists('package.json')) {
			var pkg = grunt.file.readJSON('package.json');
				pkg.build = pkg.build + 1;

			grunt.file.write('package.json', JSON.stringify(pkg, null, "\t"));
			options.version = pkg.build;
		} else {
			grunt.log.error('package.json does not exist');
		}
	});

	/*
	 * the main qzready task
	 */
	grunt.registerMultiTask('qzready', 'For auto-generating qz ready files', function() {
		options = this.options();

		grunt.config.set('clean', ['tmp']);
		grunt.task.run('clean');
		
		grunt.task.run('update_version');
		grunt.task.run('prepare_styles');
		grunt.task.run('prepare_scripts');
		grunt.task.run('prepare_index');
		grunt.task.run('generate_ready');

		grunt.config.set('clean', ['tmp']);
		grunt.task.run('clean');
	});

};
